// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  // username       String     @unique
  email          String?    @unique
  emailVerified  DateTime?
  firstName      String
  lastName       String
  image          String?
  hashedPassword String?
  isAdmin        Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  favorites      Favorite[]
  // sessions       Session[]
  // accounts       Account[]
  comments       Comment[]
}

model Favorite {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  userId           String @db.ObjectId
  contentId        String
  lastContentWatch Int    @default(0)
  lastContent      Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  contentId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model Account {
//   id                String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId            String  @db.ObjectId
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.String
//   access_token      String? @db.String
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.String
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken String   @unique
//   userId       String   @db.ObjectId
//   expires      DateTime

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

model PhotoALaUne {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  key         String
  title       String
  imageUrl    String
  category    String
  description String
}

model CacheData {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  key     String   @unique
  value   String
  expires DateTime
}
